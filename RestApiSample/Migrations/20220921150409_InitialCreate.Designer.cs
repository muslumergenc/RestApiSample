// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestApiSample.Model;

namespace RestApiSample.Migrations
{
    [DbContext(typeof(BookLibraryContext))]
    [Migration("20220921150409_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RestApiSample.Model.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("48a103e8-e483-48a2-ae94-7a96af854cdb"),
                            FirstName = "Victor",
                            LastName = "Hogo"
                        },
                        new
                        {
                            Id = new Guid("56b0a249-d3b9-4e6e-9ada-68c9cd37b427"),
                            FirstName = "Lev",
                            LastName = "Tolstoy"
                        });
                });

            modelBuilder.Entity("RestApiSample.Model.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            AuthorId = new Guid("48a103e8-e483-48a2-ae94-7a96af854cdb"),
                            Name = "Notre Dame'ın Kamburu"
                        },
                        new
                        {
                            Id = new Guid("da2fd609-d754-4feb-8acd-c4f9ff13ba96"),
                            AuthorId = new Guid("48a103e8-e483-48a2-ae94-7a96af854cdb"),
                            Name = "Sefiller"
                        },
                        new
                        {
                            Id = new Guid("2902b665-1190-4c70-9915-b9c2d7680450"),
                            AuthorId = new Guid("56b0a249-d3b9-4e6e-9ada-68c9cd37b427"),
                            Name = "İnsan Ne İle Yaşar"
                        },
                        new
                        {
                            Id = new Guid("102b566b-ba1f-404c-b2df-e2cde39ade09"),
                            AuthorId = new Guid("56b0a249-d3b9-4e6e-9ada-68c9cd37b427"),
                            Name = "Savaş ve Barış"
                        });
                });

            modelBuilder.Entity("RestApiSample.Model.Entities.Book", b =>
                {
                    b.HasOne("RestApiSample.Model.Entities.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
